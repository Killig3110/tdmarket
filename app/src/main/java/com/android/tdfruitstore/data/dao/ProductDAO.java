package com.android.tdfruitstore.data.dao;

import android.util.Log;
import com.android.tdfruitstore.data.entities.Product;
import com.google.firebase.firestore.*;
import java.util.ArrayList;
import java.util.List;

public class ProductDAO {
    private final FirebaseFirestore db;
    private static final String COLLECTION_NAME = "products";

    public ProductDAO() {
        this.db = FirebaseFirestore.getInstance();
    }

    // üî• Th√™m m·ªôt s·∫£n ph·∫©m
    public void insertProduct(Product product, FirestoreCallback<Boolean> callback) {
        db.collection(COLLECTION_NAME).document(product.getId()) // ID l√† String
                .set(product)
                .addOnSuccessListener(aVoid -> {
                    Log.d("Firestore", "‚úÖ S·∫£n ph·∫©m ƒë√£ th√™m: " + product.getName());
                    callback.onSuccess(true);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi th√™m s·∫£n ph·∫©m", e);
                    callback.onFailure(e);
                });
    }

    // üî• C·∫≠p nh·∫≠t m·ªôt s·∫£n ph·∫©m
    public void updateProduct(Product product, FirestoreCallback<Boolean> callback) {
        db.collection(COLLECTION_NAME).document(product.getId()) // ID l√† String
                .set(product)
                .addOnSuccessListener(aVoid -> {
                    Log.d("Firestore", "‚úÖ S·∫£n ph·∫©m ƒë√£ c·∫≠p nh·∫≠t: " + product.getName());
                    callback.onSuccess(true);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m", e);
                    callback.onFailure(e);
                });
    }

    // üî• X√≥a m·ªôt s·∫£n ph·∫©m
    public void deleteProduct(String productId, FirestoreCallback<Boolean> callback) {
        db.collection(COLLECTION_NAME).document(productId) // ID l√† String
                .delete()
                .addOnSuccessListener(aVoid -> {
                    Log.d("Firestore", "‚úÖ S·∫£n ph·∫©m ƒë√£ b·ªã x√≥a: " + productId);
                    callback.onSuccess(true);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m", e);
                    callback.onFailure(e);
                });
    }

    // üî• L·∫•y s·∫£n ph·∫©m theo ID
    public void getProductById(String productId, FirestoreCallback<Product> callback) {
        db.collection(COLLECTION_NAME).document(productId) // ID l√† String
                .get()
                .addOnSuccessListener(documentSnapshot -> {
                    if (documentSnapshot.exists()) {
                        Product product = documentSnapshot.toObject(Product.class);
                        callback.onSuccess(product);
                    } else {
                        Log.e("Firestore", "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + productId);
                        callback.onSuccess(null);
                    }
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo ID", e);
                    callback.onFailure(e);
                });
    }

    // üî• L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    public void getAllProducts(FirestoreCallback<List<Product>> callback) {
        db.collection(COLLECTION_NAME)
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    List<Product> productList = new ArrayList<>();
                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {
                        Product product = doc.toObject(Product.class);
                        productList.add(product);
                    }
                    callback.onSuccess(productList);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m", e);
                    callback.onFailure(e);
                });
    }

    // üî• L·∫•y s·∫£n ph·∫©m theo danh m·ª•c
    public void getProductsByCategory(String category, FirestoreCallback<List<Product>> callback) {
        db.collection(COLLECTION_NAME)
                .whereEqualTo("category", category)
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    List<Product> productList = new ArrayList<>();
                    for (DocumentSnapshot doc : queryDocumentSnapshots) {
                        Product product = doc.toObject(Product.class);
                        productList.add(product);
                    }
                    callback.onSuccess(productList);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo danh m·ª•c", e);
                    callback.onFailure(e);
                });
    }

    // üî• C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    public void updateProductStock(String productId, int newStock, FirestoreCallback<Boolean> callback) {
        db.collection(COLLECTION_NAME).document(productId) // ID l√† String
                .update("stock", newStock)
                .addOnSuccessListener(aVoid -> {
                    Log.d("Firestore", "‚úÖ S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
                    callback.onSuccess(true);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m", e);
                    callback.onFailure(e);
                });
    }

    // üî• C·∫≠p nh·∫≠t ƒë√°nh gi√° s·∫£n ph·∫©m
    public void updateProductRating(String productId, float newRating, FirestoreCallback<Boolean> callback) {
        db.collection(COLLECTION_NAME).document(productId) // ID l√† String
                .update("rating", newRating)
                .addOnSuccessListener(aVoid -> {
                    Log.d("Firestore", "‚úÖ ƒê√°nh gi√° s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
                    callback.onSuccess(true);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒë√°nh gi√° s·∫£n ph·∫©m", e);
                    callback.onFailure(e);
                });
    }

    // üî• T√¨m s·∫£n ph·∫©m theo t·ª´ kh√≥a (t√¨m theo t√™n ho·∫∑c danh m·ª•c)
    public void getProductsByKeyword(String keyword, FirestoreCallback<List<Product>> callback) {
        db.collection(COLLECTION_NAME)
                .whereGreaterThanOrEqualTo("name", keyword)
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    List<Product> productList = new ArrayList<>();
                    for (DocumentSnapshot doc : queryDocumentSnapshots) {
                        Product product = doc.toObject(Product.class);
                        productList.add(product);
                    }
                    callback.onSuccess(productList);
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi t√¨m ki·∫øm s·∫£n ph·∫©m", e);
                    callback.onFailure(e);
                });
    }

    // üî• Th√™m danh s√°ch s·∫£n ph·∫©m
    public void insertProducts(List<Product> productList, FirestoreCallback<Boolean> callback) {
        for (Product product : productList) {
            insertProduct(product, new FirestoreCallback<Boolean>() {
                @Override
                public void onSuccess(Boolean result) {
                    Log.d("Firestore", "‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m: " + product.getName());
                }

                @Override
                public void onFailure(Exception e) {
                    Log.e("Firestore", "‚ùå L·ªói khi th√™m s·∫£n ph·∫©m: " + product.getName(), e);
                }
            });
        }
        callback.onSuccess(true);
    }

    // üî• L·∫•y s·∫£n ph·∫©m theo t√™n
    public void getProductByName(String name, FirestoreCallback<Product> callback) {
        db.collection(COLLECTION_NAME)
                .whereEqualTo("name", name)
                .get()
                .addOnSuccessListener(queryDocumentSnapshots -> {
                    if (!queryDocumentSnapshots.isEmpty()) {
                        Product product = queryDocumentSnapshots.getDocuments().get(0).toObject(Product.class);
                        callback.onSuccess(product);
                    } else {
                        Log.e("Firestore", "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi t√™n: " + name);
                        callback.onSuccess(null);
                    }
                })
                .addOnFailureListener(e -> {
                    Log.e("Firestore", "‚ùå L·ªói khi l·∫•y s·∫£n ph·∫©m theo t√™n", e);
                    callback.onFailure(e);
                });
    }
}
